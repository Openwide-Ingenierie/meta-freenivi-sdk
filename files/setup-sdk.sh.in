#! /bin/bash

if [ $# -gt 0 ]; then
    echo "Usage: $0"
    echo "  Setup the SDK to be use at this location."
    if [ "$1" == "-h" -o "$1" == "--help" ]; then
        exit 0
    else
	exit 1
    fi
fi

SDK_TARGET_DIRECTORY="$(cd $(dirname $(readlink -f $0)) && pwd)"
SDK_DEFAULT_TARGET_DIRECTORY="$(cat ${SDK_TARGET_DIRECTORY}/last-install-directory)"
SDK_ENV_SETUP_SCRIPT="${SDK_TARGET_DIRECTORY}/environment-setup-@REAL_MULTIMACH_TARGET_SYS@"
REPLACES="s:${SDK_DEFAULT_TARGET_DIRECTORY}:${SDK_TARGET_DIRECTORY}:g"

# fix environment paths
sed -e ${REPLACES} -i ${SDK_ENV_SETUP_SCRIPT}

# fix dynamic loader paths in all ELF SDK binaries
NATIVE_SYSROOT=$(cat ${SDK_ENV_SETUP_SCRIPT} \
                 | grep 'OECORE_NATIVE_SYSROOT=' \
                 | cut -d'=' -f2 \
                 | tr -d '"')
DL_PATH=$(find ${NATIVE_SYSROOT}/lib -name "ld-linux*")
if [ "$DL_PATH" = "" ] ; then
    echo "error: relocate script unable to find ld-linux.so"
    exit 1
fi
EXECUTABLE_FILES=$(find ${NATIVE_SYSROOT} -type f -perm /111 -exec file '{}' \; \
                   | grep "\(executable\|dynamically linked\)" \
                   | cut -f 1 -d ':')
${SDK_TARGET_DIRECTORY}/relocate_sdk.py \
    ${SDK_TARGET_DIRECTORY} ${DL_PATH} ${EXECUTABLE_FILES}
if [ $? -ne 0 ]; then
    echo "error: relocate script failed"
    exit 1
fi

# fix all text files: configs/scripts/etc
find ${NATIVE_SYSROOT} -type f -exec file '{}' \; \
| grep ":.*\(ASCII\|script\|source\).*text" \
| cut -d':' -f1 \
| xargs sed -i -e ${REPLACES}

# fix all symlinks
for l in $(find ${NATIVE_SYSROOT} -type l); do
    ln -sfn $(readlink $l | sed -e ${REPLACES}) $l
done

# find out all perl scripts in ${NATIVE_SYSROOT} and modify them replacing the
# host perl with SDK perl
for perl_script in $(grep "^#!.*perl" -rl ${NATIVE_SYSROOT}); do
    sed -i -e "s:^#! */usr/bin/perl.*:#! /usr/bin/env perl:g" \
           -e "s: /usr/bin/perl: /usr/bin/env perl:g" $perl_script
done

source ${SDK_ENV_SETUP_SCRIPT}

# We need to create a new mkspec for the installed SDK without environment
# variables

# Set OE_QMAKE_COMPILER as environment-setup-@REAL_MULTIMACH_TARGET_SYS@ does
# not set it
OE_QMAKE_COMPILER=gcc

MKSPEC="linux-@DISTRO@-g++"
MKSPEC_PATH="$QMAKESPEC/../$MKSPEC"
cp -r "$QMAKESPEC" "$MKSPEC_PATH"
error_code=$?
if [ $error_code -ne 0 ]; then
    echo "error: copy of OE mkspec failed"
    exit $error_code
fi

VARLIST=$(sed -n 's/.*$(\(.*\)).*/\1/p' "$MKSPEC_PATH/qmake.conf" | sort -u)
REPLACES=

for VAR in $VARLIST; do
    EVAL=${!VAR}
    REPLACES+="s@\$($VAR)@$EVAL@g; "
done

sed -i "$REPLACES" "$MKSPEC_PATH/qmake.conf"

# set absolute paths
VARLIST=" \
QMAKE_AR \
QMAKE_STRIP \
QMAKE_WAYLAND_SCANNER \
QMAKE_CC \
QMAKE_CXX \
QMAKE_LINK \
QMAKE_LINK_SHLIB \
QMAKE_LINK_C \
QMAKE_LINK_C_SHLIB \
"

for VAR in $VARLIST; do
    VALUE=$(sed -n "s/$VAR *= *\([^ ]*\).*/\1/p" "$MKSPEC_PATH/qmake.conf")
    ABSOLUTE_VALUE=$(command -v $VALUE)
    sed -i "s%\($VAR *= *\)$VALUE%\1$ABSOLUTE_VALUE%" "$MKSPEC_PATH/qmake.conf"
done

echo "${SDK_TARGET_DIRECTORY}" > ${SDK_TARGET_DIRECTORY}/last-install-directory

exit 0
